{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.components.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchKey","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6RAIaA,G,kBAAO,SAACC,GAEjB,OACI,sBAAKC,UAAU,iBAAf,UACA,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAML,EAAMI,QAAQE,OACpB,4BAAKN,EAAMI,QAAQG,aCLdC,EAAW,SAACR,GAErB,OACG,qBAAKC,UAAU,YAAf,SACKD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACvB,cAAC,EAAD,CAAyBA,QAAUA,GAAvBA,EAAQC,UCNtBM,G,MAAY,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aAErC,OACQ,uBAAOZ,UAAU,SAAUa,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MCyC1EG,E,kDAzCb,aAAe,IAAD,8BACZ,gBAaFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAACC,UAAWF,EAAEG,OAAOC,SAbnC,EAAKC,MAAQ,CACXb,SAAU,GACVU,UAAW,IAJD,E,gEAQO,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAAUkB,S,+BAOhC,IAAD,EACyBC,KAAKN,MAA7Bb,EADD,EACCA,SAAUU,EADX,EACWA,UACZU,EAAmBpB,EAASqB,QAAO,SAAA1B,GAAO,OAC9CA,EAAQE,KAAKyB,cAAcC,SAASb,EAAUY,kBAGhD,OAEE,sBAAK9B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CAAWW,YAAY,sBACvBC,aAAce,KAAKf,eAEnB,uBAEA,cAAC,EAAD,CAAUJ,SAAUoB,W,GAlCVI,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e1d29ee8.chunk.js","sourcesContent":["import React from 'react'\r\nimport './card.component.css'\r\n\r\n\r\nexport const Card = (props) => {\r\n\r\n    return (\r\n        <div className=\"card-container\">\r\n        <img alt='monster' src={`https://robohash.org/${props.monster.id}?set=set4&size=180x180`}/>\r\n        <h2>{ props.monster.name }</h2>\r\n        <p>{ props.monster.email }</p>\r\n        </div>\r\n    );\r\n}","import React from 'react'\r\nimport './card-list.component.css'\r\nimport { Card } from '../card/card.component'\r\n\r\n\r\nexport const CardList = (props) => {\r\n\r\n    return(\r\n       <div className=\"card-list\">\r\n           {props.monsters.map(monster => (\r\n               <Card key={ monster.id } monster={ monster }/>\r\n           ))}\r\n       </div>\r\n    )\r\n    };","import React from 'react'\r\nimport './search-box.styles.css'\r\n\r\n\r\nexport const SearchBox = ({ placeholder, handleChange}) => {\r\n\r\n    return (\r\n            <input className=\"search\"  type=\"search\" placeholder={placeholder} onChange={handleChange}/>\r\n    )\r\n\r\n\r\n}","import './App.css';\nimport React, { Component } from 'react';\n\nimport { CardList } from './components/card-list/card-list.component.jsx'\nimport { SearchBox } from './components/search-box/search-box.components.jsx'\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchKey: '',\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters: users}))\n  }\n\n  handleChange = (e) => {\n    this.setState({searchKey: e.target.value})\n  }\n\n  render() {\n    const { monsters, searchKey } = this.state;\n    const filteredMonsters = monsters.filter(monster => (\n      monster.name.toLowerCase().includes(searchKey.toLowerCase())\n    ));\n\n    return (\n      \n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox placeholder=\"Search for monsters\" \n        handleChange={this.handleChange}/>\n      \n        <hr/>\n\n        <CardList monsters={filteredMonsters}/>\n      </div>\n    );\n  }\n  \n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}